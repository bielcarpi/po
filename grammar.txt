<programa> ::= <llistaDeclaracions> <declaracioFuncioMain&> | <declaracioFuncioMain&>
<llistaDeclaracions> ::= <declaracio> <llistaDeclaracions> | ε
<declaracio> ::= <declaracioTipus&> | <declaracioVariable&> | <declaracioFuncio&>
<declaracioTipus&> ::= type ID { \n <declaracioVariable&> } \n
<declaracioVariable&> ::= var ID <declaracioVariablePrima> \n
<declaracioVariablePrima> ::= <assignacioVariable> | ε
<assignacioVariable> ::= = <expressio> | ++ | --
<declaracioFuncio&> ::= func ID ( <parametres> ) <sentenciaComposta> \n
<cridaFuncio> ::= ( <arguments> ) \n
<declaracioFuncioMain&> ::= main ( ) <sentenciaComposta> \n
<parametres> ::= <llistaParametres> | ε
<llistaParametres> ::= ID <llistaParametresPrima>
<llistaParametresPrima> ::= , ID <llistaParametresPrima> | ε
<sentencia> ::= ID <sentenciaId> | <cridaFuncio> | <sentenciaCondicional&> | <sentenciaWhile&> | <sentenciaFor&> | <sentenciaSwitch&> | <sentenciaRetorn&> | <sentenciaBreak>
<sentenciaId> ::= <assignacioVariable> \n | <cridaFuncio>
<sentenciaComposta> ::= { \n <llistaComposta> }
<llistaComposta> ::= <declaracioBloc> <llistaComposta> | ε
<declaracioBloc> ::= <declaracioTipus&> | <sentencia>
<sentenciaCondicional&> ::= if <expressio> <sentenciaComposta> \n <llistaElsif> <blocElse&>
<llistaElsif> ::= <blocElsif&> \n <llistaElsif> | ε
<blocElsif&> ::= elsif <expressio> <sentenciaComposta>
<blocElse&> ::= else <sentenciaComposta> \n | ε
<sentenciaSwitch&> ::= switch <expressio> <blocSwitch>
<blocSwitch> ::= { \n <llistaOpt> <blocDefault&> } \n
<llistaOpt> ::= <blocOpt&> <llistaOptPrima>
<llistaOptPrima> ::= <blocOpt&> <llistaOptPrima> | ε
<blocOpt&> ::= opt <expressio> -> <sentenciaComposta> \n
<blocDefault&> ::= default -> <sentenciaComposta> \n | ε
<sentenciaRetorn&> ::= ret <expressio> \n
<sentenciaBreak> ::= break \n
<sentenciaWhile&> ::= while <expressio> <sentenciaComposta> \n
<sentenciaFor&> ::= for ID = <expressio> , <expressio> , <assignacioFor> <sentenciaComposta> \n
<assignacioFor> ::= ID <assignacioVariable>
<expressio> ::= <expressioAnd> <expressioPrima>
<expressioPrima> ::= or <expressioAnd> <expressioPrima> | ε
<expressioAnd> ::= <expressioNot> <expressioAndPrima>
<expressioAndPrima> ::= and <expressioNot> <expressioAndPrima> | ε
<expressioNot> ::= not <expressioNot> | <expressioRel>
<expressioRel> ::= <expressioSuma> <expressioRelPrima>
<expressioRelPrima> ::= <operador> <expressioSuma> | ε
<operador> ::= < | > | <= | >= | == | !=
<expressioSuma> ::= <expressioMul> <expressioSumaPrima>
<expressioSumaPrima> ::= <operadorSuma> <expressioMul> <expressioSumaPrima> | ε
<operadorSuma> ::= + | -
<expressioMul> ::= <expressioUnaria> <expressioMulPrima>
<expressioMulPrima> ::= <operadorMul> <expressioUnaria> <expressioMulPrima> | ε
<operadorMul> ::= % | / | *
<expressioUnaria> ::= - <expressioUnaria> | <factor>
<factor> ::= <constant> | <mutable>
<mutable> ::= ID <continuacioMutable>
<continuacioMutable> ::= ( <arguments> ) | ε
<arguments> ::= <llistaArguments> | ε
<llistaArguments> ::= <expressio> <llistaArgumentsPrima>
<llistaArgumentsPrima> ::= , <expressio> <llistaArgumentsPrima> | ε
<constant> ::= 1 | STRING | true | false
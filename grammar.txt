<programa> ::= <declaracioTipus> | <llistaDeclaracions> | <declaracioFuncioMain>
<llistaDeclaracions> ::= <declaracio> <llistaDeclaracions> | ε
<declaracio> ::= <declaracioVariable> | <declaracioFuncio>
<declaracioTipus> ::= type ID { \n <declaracioVariableTipus> }
<declaracioVariableTipus> ::= var ID  \n
<declaracioVariable> ::= var <declaracioVariableMultiple> \n
<declaracioVariableMultiple> ::= <declaracioVariableID> <declaracioVariableAssigned>
<declaracioVariableAssigned> ::=  -> ID = <expressio> | ε
<declaracioVariableID> ::= ID
<declaracioFuncio> ::= func ID ( <parametres> ) <sentenciaComposta> \n
<declaracioFuncioMain> ::= func main ( ) <sentenciaComposta> \n
<parametres> ::= <llistaParametres> | ε
<llistaParametres> ::= <declaracioVariableParametre> <llistaParametresPrima>
<llistaParametresPrima> ::= , <declaracioVariableParametre> <llistaParametresPrima> | ε
<declaracioVariableParametre> ::= <declaracioVariableID>
<sentencia> ::= <sentenciaExpressio> | <sentenciaCondicional> | <sentenciaWhile> | <sentenciaFor> | <sentenciaSwitch> | <sentenciaRetorn> | <sentenciaBreak>
<sentenciaExpressio> ::= <expressio> \n
<sentenciaComposta> ::= { \n <llistaComposta> }
<llistaComposta> ::= <declaracioBloc> <llistaComposta> | ε
<declaracioBloc> ::= <declaracioVariable> | <sentencia>
<sentenciaCondicional> ::= if <expressio>  <sentenciaComposta>  { elsif  <expressio> <sentenciaComposta> } [ else <sentenciaComposta> ] \n
<sentenciaSwitch> ::= switch <expressio> <blocSwitch>
<blocSwitch> ::= { \n <llistaOpt> [<blocDefault>] } \n
<llistaOpt> ::= <blocOpt> <llistaOptPrima>
<llistaOptPrima> ::= <blocOpt> <llistaOptPrima> | ε
<blocOpt> ::= opt <expressio> -> <sentenciaComposta> \n
<blocDefault> ::= default -> <sentenciaComposta> \n
<sentenciaRetorn> ::= ret [ <expressio> ] \n
<sentenciaBreak> ::= break \n
<sentenciaWhile> ::= while <expressio> <sentenciaComposta> \n
<sentenciaFor> ::= for ID -> ID <continuacioFor>
<continuacioFor> ::= = <expressio> <fori> | <foreach>
<fori> ::= ,  <expressio> , <expressio> <sentenciaComposta> \n
<foreach> ::= in <expressio> <sentenciaComposta> \n
<expressio> ::= <expressioAnd> <expressioPrima>
<expressioPrima> ::= or <expressioAnd> <expressioPrima> | ε
<expressioAnd> ::= <expressioNot> <expressioAndPrima>
<expressioAndPrima> ::= and <expressioNot> <expressioAndPrima> | ε
<expressioNot> ::= not <expressioNot> | <expressioRel>
<expressioRel> ::= <expressioSuma> <continuacioRel>
<continuacioRel> ::= <operador> <expressioSuma> | ε
<operador> ::= < | > | <= | >= | == | !=
<expressioSuma> ::= <expressioMul> <expressioSumaPrima>
<expressioSumaPrima> ::= <operadorSuma> <expressioMul> <expressioSumaPrima> | ε
<operadorSuma> ::= + | -
<expressioMul> ::= <expressioUnaria> <expressioMulPrima>
<expressioMulPrima> ::= <operadorMul> <expressioUnaria> <expressioMulPrima> | ε
<operadorMul> ::= % | / | *
<expressioUnaria> ::= - <expressioUnaria> | <factor>
<factor> ::= <constant> | <mutable>
<mutable> ::= ID <continuacioMutable>
<continuacioMutable> ::= ( <arguments> ) | -> ID <accessVariable> | ++ | -- | ε
<accessVariable> ::= = <expressio> | [ <expressio> ]
<arguments> ::= <llistaArguments> | ε
<llistaArguments> ::= <expressio> <llistaArgumentsPrima>
<llistaArgumentsPrima> ::= , <expressio> <llistaArgumentsPrima> | ε
<constant> ::= 1 | STRING | true | false